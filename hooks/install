#!/usr/bin/env python2
# -*- python -*-

import os
import shutil
from subprocess import check_call


# If the user's environment has "juju-origin: ppa" set, they will
# automatically have access to python-charmhelpers and python-shelltoolbox.
# However, we want to support environments that use the non-PPA environment as
# well.  To do so, we need to install the Juju PPA, which we will do with a
# couple of functions that are actually maintained in python-shelltoolbox.
import bootstrap_utils
bootstrap_utils.install_extra_repositories('ppa:juju/pkgs')

# Python dependencies must be installed here so that the charm can import and
# use required libraries.
PYTHON_DEPENDENCIES = (
    'python-charmhelpers', 'python-launchpadlib', 'python-shelltoolbox',
    'python-tempita',
)
check_call(('apt-get', 'install', '-y') + PYTHON_DEPENDENCIES)


# These modules depend on the Python dependencies above being installed so they
# must not be imported until those packages are available.
from charmhelpers import (
    get_config,
    log,
)
from shelltoolbox import (
    apt_get_install,
    install_extra_repositories,
)

from utils import (
    cmd_log,
    config_json,
    fetch_api,
    fetch_gui,
    legacy_juju,
    log_hook,
    get_staging_dependencies,
    save_or_create_certificates,
    setup_gui,
    setup_nginx,
)


CONFIG_FILES = ('haproxy.conf', 'nginx.conf')
REPOSITORIES = ('ppa:juju-gui/ppa',)
DEB_DEPENDENCIES = ('curl', 'haproxy', 'nginx', 'openssl')
JUJU_CORE_DEPENDENCIES = ('python-yaml',)


def get_dependencies():
    """Install deb dependencies."""
    log('Installing dependencies.')
    cmd_log(install_extra_repositories(*REPOSITORIES))
    cmd_log(apt_get_install(*DEB_DEPENDENCIES))


def setup_services():
    """Set up haproxy and nginx upstart configuration files."""
    log('Setting up haproxy and nginx start up scripts.')
    source_dir = os.path.join(os.path.dirname(__file__),  '..', 'config')
    for config_file in CONFIG_FILES:
        shutil.copy(os.path.join(source_dir, config_file), '/etc/init/')


def main():
    config = get_config()
    get_dependencies()
    # juju-core staging is not supported yet.
    if legacy_juju and config.get('staging'):
        get_staging_dependencies()
    release_tarball = fetch_gui(
        config['juju-gui-source'], config['command-log-file'])
    setup_gui(release_tarball)
    setup_nginx()
    save_or_create_certificates(
        config['ssl-cert-path'], config.get('ssl-cert-contents'),
        config.get('ssl-key-contents'))
    if legacy_juju:
        fetch_api(config['juju-api-branch'])
    else:
        cmd_log(apt_get_install(*JUJU_CORE_DEPENDENCIES))
    setup_services()
    config_json.set(config)


if __name__ == '__main__':
    with log_hook():
        main()
