#!/usr/bin/env python2
# -*- python -*-

# This file is part of the Juju GUI, which lets users view and manage Juju
# environments within a graphical interface (https://launchpad.net/juju-gui).
# Copyright (C) 2012-2013 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import errno
import json
import os

# We need to install the Juju PPA, which we will do with a
# couple of functions that are actually maintained in python-shelltoolbox.
import bootstrap_utils


def get_config():
    output = bootstrap_utils.run('config-get', '--format', 'json')
    return json.loads(output)

config = get_config()
bootstrap_utils.install_extra_repositories(config['repository-location'])

# Python dependencies must be installed here so that the charm can import and
# use required libraries.
PYTHON_DEPENDENCIES = (
    'python-apt', 'python-launchpadlib', 'python-shelltoolbox',
    'python-tempita',
)
bootstrap_utils.run(*(('apt-get', 'install', '-y') + PYTHON_DEPENDENCIES))


from charmhelpers import log
from utils import (
    config_json,
    log_hook,
)
from backend import Backend


def main():
    # Run pre-install tasks, if available.  Please do not rely on the
    # exec.d interface without conferring with the Juju GUI team: it may
    # change after upcoming discussion with Canonical IS.
    if os.path.isdir('exec.d'):
        dirnames = os.listdir('exec.d')
        dirnames.sort()
        for module in dirnames:
            filename = os.path.join('exec.d', module, 'charm-pre-install')
            try:
                bootstrap_utils.run(filename)
            except OSError, e:
                # If the exec.d file does not exist or is not runnable or
                # is not a directory, assume we can recover.  Log the problem
                # and proceed.  Note that Juju Core has a special need of
                # errno.ENOTDIR because it apparently adds a ".empty" file in
                # empty charm directories, so trying to run
                # ./exec.d/.empty/charm-pre-install will trigger that error.
                if e.errno in (errno.ENOENT, errno.EACCES, errno.ENOTDIR):
                    log('{}: {}'.format(e.strerror, filename))
                else:
                    raise
    config = get_config()
    backend = Backend(config)
    backend.install()
    # Store current configuration.
    config_json.set(config)


if __name__ == '__main__':
    with log_hook():
        main()
