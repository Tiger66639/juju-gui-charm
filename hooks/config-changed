#!/usr/bin/env python2
# -*- python -*-

# Copyright 2012 Canonical Ltd.  This software is licensed under the
# GNU Affero General Public License version 3 (see the file LICENSE).

import sys

from charmhelpers import (
    get_config,
    log,
    service_control,
    STOP,
)
from shelltoolbox import (
    DictDiffer,
    su,
)

from utils import (
    AGENT,
    config_json,
    fetch_api,
    fetch_gui,
    get_staging_dependencies,
    HAPROXY,
    IMPROV,
    legacy_juju,
    log_hook,
    NGINX,
    save_or_create_certificates,
    setup_gui,
    start_agent,
    start_gui,
    start_improv,
)


def handle_config_changes(config, diff):
    # Handle all configuration file changes.
    log('Updating configuration.')

    added_or_changed = diff.added_or_changed
    in_staging = config.get('staging')
    is_legacy_juju = legacy_juju()

    # The gui_source_changed and api_branch_changed variables control whether
    # we restart the GUI and the API, respectively, at the end of the function.
    gui_source_changed = False
    api_branch_changed = False

    # Fetch new sources?
    if 'juju-gui-source' in added_or_changed:
        gui_source_changed = True
        release_tarball = fetch_gui(
            config['juju-gui-source'], config['command-log-file'])
        setup_gui(release_tarball)
    if is_legacy_juju and ('juju-api-branch' in added_or_changed):
        api_branch_changed = True
        fetch_api(config['juju-api-branch'])

    # Handle changes to SSL certificates.
    ssl_properties = set(
        ['ssl-cert-path', 'ssl-cert-contents', 'ssl-key-contents'])
    ssl_changed = added_or_changed & ssl_properties
    if ssl_changed:
        save_or_create_certificates(
            config['ssl-cert-path'], config.get('ssl-cert-contents'),
            config.get('ssl-key-contents'))

    # Handle changes to the improv server configuration. This step is currently
    # skipped if the charm is deployed in a juju-core environment where the
    # staging server is not supported.
    if is_legacy_juju:
        if in_staging:
            staging_properties = set(['staging', 'staging-environment'])
            staging_changed = added_or_changed & staging_properties
            if staging_changed or ssl_changed or api_branch_changed:
                if 'staging' in added_or_changed:
                    # 'staging' went from False to True, so the agent server is
                    # running and must be stopped.
                    current_api = AGENT
                    # We need to make sure we have staging dependencies.
                    get_staging_dependencies()
                else:
                    # Only staging parameters changed, so the existing staging
                    # server must be stopped and later restarted.
                    current_api = IMPROV
                log('Stopping %s.' % current_api)
                service_control(current_api, STOP)
                # Now the improv server can be cleanly started.
                log('Starting or restarting staging.')
                start_improv(config.get('staging-environment'),
                             config['ssl-cert-path'])
        else:
            agent_changed = 'staging' in added_or_changed
            if agent_changed or ssl_changed or api_branch_changed:
                if agent_changed:
                    # If 'staging' transitions to False we need to stop the
                    # backend and start the agent.
                    current_api = IMPROV
                else:
                    # The agent is still running but the configuration has been
                    # updated -- bounce it.
                    current_api = AGENT
                service_control(current_api, STOP)
                log('Starting or restarting Juju API agent.')
                start_agent(config['ssl-cert-path'])

    # Handle changes to the juju-gui configuration.
    gui_properties = set([
        'juju-gui-console-enabled', 'login-help', 'read-only', 'serve-tests',
        'secure'])
    gui_changed = added_or_changed & gui_properties
    # Changes on the "staging" option are only relevant in PyJuju environments.
    staging_changed = is_legacy_juju and ('staging' in added_or_changed)
    if gui_changed or staging_changed or ssl_changed or gui_source_changed:
        with su('root'):
            service_control(HAPROXY, STOP)
            service_control(NGINX, STOP)
        console_enabled = config.get('juju-gui-console-enabled')
        login_help = config['login-help']
        readonly = config['read-only']
        serve_tests = config['serve-tests']
        ssl_cert_path = config['ssl-cert-path']
        secure = config['secure']
        start_gui(
            console_enabled, login_help, readonly, in_staging, ssl_cert_path,
            serve_tests, secure=secure)


def main():
    config = get_config()
    prev_config = config_json.get()
    diff = DictDiffer(config, prev_config)

    if not diff.modified:
        log("No configuration changes, exiting.")
        sys.exit(0)
    handle_config_changes(config, diff)
    config_json.set(config)


if __name__ == '__main__':
    with log_hook():
        main()
