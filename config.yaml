options:
  juju-gui-source:
    description: |
      Where to install Juju GUI from. Possible values are:
      - 'stable' (default): the latest stable release will be deployed;
      - 'trunk': the latest trunk release will be deployed;
      - a stable version (e.g '0.1.0'): the specified stable version will be
        deployed;
      - a trunk version (e.g '0.1.0+build.1'): the specified trunk version
        will be deployed;
      - a Bazaar branch (e.g. 'lp:juju-gui'): a release will be created and
        deployed from the specified Bazaar branch. 'http://' prefixed branches
        work as well.
      - a 'url:' prefixed url (ex: url:http://...) of a specific location
        to pull a release from.
    type: string
    default: stable
  juju-api-branch:
    description: |
      The Juju API Bazaar branch (implementing the WebSocket server).
      Since juju-core includes the WebSocket API server out of the box, this
      option is ignored if the charm is deployed using juju-core.
    type: string
    default: lp:~hazmat/juju/rapi-rollup
  staging:
    description: |
      Connect the Juju GUI to the staging backend
      (i.e. a simulated Juju environment).
      Currently juju-core does not support the staging backend. For this
      reason, this option is ignored if the charm is deployed using juju-core.
    type: boolean
    default: false
  staging-environment:
    description: |
      The environment JSON export used by the staging server. This option can
      be used to change the topology of the simulated Juju environment.
      Possible values are 'sample' and 'large'.
      Currently juju-core does not support the staging backend. For this
      reason, this option is ignored if the charm is deployed using juju-core.
    type: string
    default: sample
  juju-gui-console-enabled:
    description: |
      Whether or not the console should be enabled for the browser.
    type: boolean
    default: false
  command-log-file:
    description: |
      The log file where stdout and stderr should be sent for all
      commands that are run by charm hooks.
    type: string
    default: /var/log/juju/juju-gui.log
  ssl-cert-path:
    description: |
      The path to the directory where the SSL certificates are stored.
    type: string
    default: /etc/ssl/juju-gui
  ssl-cert-contents:
    description: |
      The contents of the certificate file to be used in SSL connections to
      the GUI. Both ssl-cert-contents and ssl-key-contents must be provided.
      If not, cetificates will be automatically generated.
    type: string
  ssl-key-contents:
    description: |
      The contents of the private key file to be used in SSL connections to
      the GUI. Both ssl-cert-contents and ssl-key-contents must be provided.
      If not, cetificates will be automatically generated.
    type: string
  login-help:
    description: |
      The help text shown to the user on the login screen.
    type: string
    default: |
      The password is the admin-secret from the Juju environment.  This can
      often be found by looking in ~/.juju/environments.yaml.
  read-only:
    description: |
      Whether or not the GUI is in read-only mode. Note that read-only mode is
      advisory, and enforced only in the client. If someone can access the
      websocket and has the password, they can send commands over the websocket
      to mutate the environment.
    type: boolean
    default: false
  serve-tests:
    description: |
      Whether or not the GUI unit tests are exposed. If this option is enabled,
      unit tests can be run in the browser by visiting the URL
      "https://[Juju GUI address]/test/".
    type: boolean
    default: false
  secure:
    description: |
      In order to run the GUI over a non secure connection (HTTP) set this flag
      to false. Do not set this property unless you understand and accept the
      risks.
    type: boolean
    default: true
  sandbox:
    description: |
      Run using an in-memory sandbox rather than a real (or even improv) Juju backend.
      Sandbox is a client side construct running entirely in the client. Sandbox doesn't
      currently support imported environment simulation and is exclusive to the staging: true
      configuration. If staging is true it will be used in preference to sandbox at this time.
    type: boolean
    default: false
  allow-additional-deb-repositories:
    description: |
      Allow access to remote PPAs. If this is False then you must have somehow
      configured the configured package sources to include the packages that
      the GUI needs.  This will be made more explicit soon.  For now, look in
      the source: hooks/install and hooks/backend.py in particular.
    type: boolean
    default: true
  charmworld-url:
    description: |
      The URL of the charm catalog site ("charmworld") from which charm catalog
      data will be drawn.
    type: string
    default: https://manage.jujucharms.com
