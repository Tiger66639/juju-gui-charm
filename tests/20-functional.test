#!tests/.venv/bin/python

# This file is part of the Juju GUI, which lets users view and manage Juju
# environments within a graphical interface (https://launchpad.net/juju-gui).
# Copyright (C) 2012-2013 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License version 3, as published by
# the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranties of MERCHANTABILITY,
# SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import httplib
import unittest
import urlparse

from selenium.webdriver import Firefox
from selenium.webdriver.support import ui
from xvfbwrapper import Xvfb

# XXX 2013-07-30 benji bug=872264: Don't use juju_deploy directly, use
# DeployTestMixin.juju_deploy instead.  See comment in stop_services.
from deploy import juju_deploy
from helpers import (
    juju_destroy_service,
    juju_version,
    ssh,
)


JUJU_GUI_TEST_BRANCH = 'lp:~juju-gui/juju-gui/charm-tests-branch'
STAGING_SERVICES = ('haproxy', 'mediawiki', 'memcached', 'mysql', 'wordpress')
is_legacy_juju = juju_version().major == 0


class DeployTestMixin(object):

    charm = 'juju-gui'
    port = '443'

    def setUp(self):
        # Perform all graphical operations in memory.
        vdisplay = Xvfb(width=1280, height=720)
        vdisplay.start()
        self.addCleanup(vdisplay.stop)
        # Create a Selenium browser instance.
        selenium = self.selenium = Firefox()
        self.addCleanup(selenium.quit)

    def tearDown(self):
        juju_destroy_service(self.charm)

    def assertEnvironmentIsConnected(self):
        """Assert the GUI environment is connected to the Juju API agent."""
        self.wait_for_script(
            'return app && app.env && app.env.get("connected");',
            error='Environment not connected.')

    def handle_browser_warning(self):
        """Overstep the browser warning dialog if required."""
        self.wait_for_script(
            'return window.isBrowserSupported',
            error='Function isBrowserSupported not found.')
        script = 'return window.isBrowserSupported(navigator.userAgent)'
        supported = self.selenium.execute_script(script)
        if not supported:
            continue_button = self.wait_for_css_selector(
                '#browser-warning input',
                error='Browser warning dialog not found.')
            continue_button.click()

    def navigate_to(self, hostname, path='/'):
        """Load a page using the current Selenium driver.

        The page URL is calculated using the provided *hostname* and *path*.
        Retry loading the page until the page is found or a timeout exception
        is raised.
        """
        base_url = 'https://{}:{}'.format(hostname, self.port)
        url = urlparse.urljoin(base_url, path)

        def page_ready(driver):
            driver.get(url)
            return driver.title == 'Juju Admin'
        self.wait_for(page_ready, error='Juju GUI not found.')

    def wait_for(self, condition, error=None, timeout=30):
        """Wait for condition to be True.

        The argument condition is a callable accepting a driver object.
        Fail printing the provided error if timeout is exceeded.
        Otherwise, return the value returned by the condition call.
        """
        wait = ui.WebDriverWait(self.selenium, timeout)
        return wait.until(condition, error)

    def wait_for_css_selector(self, selector, error=None, timeout=30):
        """Wait until the provided CSS selector is found.

        Fail printing the provided error if timeout is exceeded.
        Otherwise, return the value returned by the script.
        """
        condition = lambda driver: driver.find_elements_by_css_selector(
            selector)
        elements = self.wait_for(condition, error=error, timeout=timeout)
        return elements[0]

    def wait_for_script(self, script, error=None, timeout=30):
        """Wait for the given JavaScript snippet to return a True value.

        Fail printing the provided error if timeout is exceeded.
        Otherwise, return the value returned by the script.
        """
        condition = lambda driver: driver.execute_script(script)
        return self.wait_for(condition, error=error, timeout=timeout)

    def get_service_names(self):
        """Return the set of services' names displayed in the current page."""
        def services_found(driver):
            return driver.find_elements_by_css_selector('.service .name')
        services = self.wait_for(services_found, 'Services not displayed.')
        return set([element.text for element in services])

    def stop_services(self, hostname, services):
        # XXX 2012-11-29 frankban bug=872264:
            # Just invoking ``juju destroy-service juju-gui`` in tearDown
            # should execute the ``stop`` hook, stopping all the services
            # started by the charm in the machine. Right now this does not
            # work in pyJuju, so the desired effect is achieved by keeping
            # track of started services and manually stopping them here.
        target = 'ubuntu@{}'.format(hostname)
        for service in services:
            ssh(target, 'sudo', 'service', service, 'stop')

    def juju_deploy(self, *args, **kws):
        """Shim in our additional cleanup for pyJuju."""
        # XXX 2012-11-29 frankban bug=872264: see *stop_services* above.
        # Once pyJuju works correctly or we drop support for it altogether, we
        # can remove this shim.
        unit_info = juju_deploy(*args, **kws)
        if is_legacy_juju:
            hostname = unit_info['public-address']
            services = ['haproxy', 'apache2']
            # Staging uses improv, otherwise the API agent is used.
            if kws.get('options').get('staging') == 'true':
                services.append('juju-api-improv')
            else:
                services.append('juju-api-agent')
            self.addCleanup(self.stop_services, hostname, services)
        return unit_info


class DeployTest(DeployTestMixin, unittest.TestCase):

    def test_api_agent(self):
        # Ensure the Juju GUI and API agent services are correctly set up.
        unit_info = self.juju_deploy(self.charm)
        hostname = unit_info['public-address']
        self.navigate_to(hostname)
        self.handle_browser_warning()
        self.assertEnvironmentIsConnected()

    @unittest.skipUnless(is_legacy_juju, 'staging only works in pyJuju')
    def test_staging(self):
        # Ensure the Juju GUI and improv services are correctly set up.
        unit_info = self.juju_deploy(self.charm, options={'staging': 'true'})
        hostname = unit_info['public-address']
        self.navigate_to(hostname)
        self.handle_browser_warning()
        self.assertEnvironmentIsConnected()
        # The staging environment contains five deployed services.
        self.assertSetEqual(set(STAGING_SERVICES), self.get_service_names())

    def test_builtin_server(self):
        # Ensure the Juju GUI and builtin server are correctly set up.
        unit_info = self.juju_deploy(
            self.charm, options={'builtin-server': 'true'})
        hostname = unit_info['public-address']
        conn = httplib.HTTPSConnection(hostname)
        conn.request('HEAD', '/')
        headers = conn.getresponse().getheaders()
        server_header = dict(headers)['server']
        self.assertIn('TornadoServer', server_header)

    def test_branch_source(self):
        # Ensure the Juju GUI is correctly deployed from a Bazaar branch.
        unit_info = self.juju_deploy(
            self.charm, options={'juju-gui-source': JUJU_GUI_TEST_BRANCH})
        hostname = unit_info['public-address']
        self.navigate_to(hostname)
        self.handle_browser_warning()
        self.assertEnvironmentIsConnected()

    def test_cache_headers(self):
        # Make sure the correct cache headers are sent.
        unit_info = self.juju_deploy(
            self.charm, options={'juju-gui-source': JUJU_GUI_TEST_BRANCH})
        hostname = unit_info['public-address']
        conn = httplib.HTTPSConnection(hostname)
        conn.request('GET', '/')
        headers = conn.getresponse().getheaders()
        # There is only one Cache-Control header.
        self.assertEqual(zip(*headers)[0].count('cache-control'), 1)
        # The right cache directives are in Cache-Control.
        cache_control = dict(headers)['cache-control']
        cache_directives = [s.strip() for s in cache_control.split(',')]
        self.assertIn('max-age=0', cache_directives)
        self.assertIn('public', cache_directives)
        self.assertIn('must-revalidate', cache_directives)

    @unittest.skipIf(is_legacy_juju, 'force-machine only works in juju-core')
    def test_force_machine(self):
        # Ensure the Juju GUI is correctly set up in the Juju bootstrap node.
        unit_info = self.juju_deploy(self.charm, force_machine=0)
        self.assertEqual('0', unit_info['machine'])
        self.navigate_to(unit_info['public-address'])
        self.handle_browser_warning()
        self.assertEnvironmentIsConnected()


if __name__ == '__main__':
    unittest.main(verbosity=2)
